#	265Draw: Sierpinski Carpets

---
##	Application Concepts

*	A Sierpinski Carpet is a recursive fractal, where smaller copies of a square are drawn around the original square to an arbitrary level of recursion.
*	Rotation, scaling, and translation actions are applied to surround the original Sierpinski Carpet with copies or tiles.

![Example Carpets](image/carpets.png "Three levels of recursion on left; Two levels of recursion with tiling on right")

###	Recursion Levels
*	In this application, recursion levels from 0 to 4 are supported. 0 is no recursion; 4 is the practical limit given canvas resolution.

###	Tiling Variations
*	`rotate`: Rotate, scale, and translate eight carpet copies around the original.
*	`carpet`: Translate and rotate copies without scaling.
*	`diagonal`: Rotate copies on the diagonals.
*	`cross`: Rotate copies up and down and across from the original.

### Colour Themes
*	`light`, `medium`, `dark` themes are supported with colours chosen randomly within each theme.

##	Application Usage

*	`sierpinski.sh` is the script which embodies the application built to create Sierpinski Carpets.

	*	The form of the command-line invocation is:
	
		`bash sierpinski.sh recursion pattern colour-theme`

	* The application accepts three parameters:
	
		*	`recursion`: an integer between 0 and 4.
		
		*	`pattern`: a string defining the tiling pattern required.
			*	`carpet` creates smaller versions of the original carpet around the original.
			*	`cross` creates four rotated versions of the original carpet, side-by-side and up-and-down plus four un-rotated versions.
			*	`diagonal` will place rotated versions of the original on the diagonals.
			*	`rotate` will rotate all versions of the original.
						
		*	`colour-theme`: a string defining the colour selections to be used.
			*	`light`: Light colours (eg. `LightBlue`) randomly chosen from `css_colours.txt` on a dark background.
			*	`medium`: Random medium colours (eg. `MediumVioletRed`) chosen.
			*	`dark`: Random `Dark` colours on a light background.
				
	*	Two SVG files are created in the same directory as the application:
		*	A Sierpinski Carpet at the recursion level and with the colour theme requested.
			*	The file name `carpet_` will be suffixed with the recursion level. Eg. `carpet_3.svg`
		*	A tiled Sierpinski Carpet with pattern and colour theme as requested.
			*	The suffix of the file name has recursion level and `ST` (which stands for `scaled and transformed`). Eg. `carpet_3ST.svg`.

	*	Console Log (all but first line is output):

			>>> Home: bash sierpinski.sh 3 rotate light
			*
			* Create a Recursive Sierpinski Carpet with 3 Levels
			python generate_carpet.py 3 light > carpet_3.txt
			*
			* Create colour svg file from base carpet
			python lines_to_svg_colour.py < carpet_3.txt > carpet_3.svg
			*
			* Change background colour in base carpet svg
			sed -i '' 's/none/MidnightBlue/g' carpet_3.svg
			*
			* Scale carpet lines down to fit in central ninth of canvas
			python rotate_scale_translate.py -f .3333 < carpet_3.txt > carpet_3S.txt
			*
			* Build tile patterns from scaled file
			python transform_carpet.py rotate < carpet_3S.txt > carpet_3ST.txt
			*
			*	Create colour svg file from tiled carpet
			python lines_to_svg_colour.py < carpet_3ST.txt > carpet_3ST.svg
			*
			* Change background colour in tiled carpet svg
			sed -i '' 's/none/MidnightBlue/g' carpet_3ST.svg

##	Application Source:
*	[`css_colours.txt`](https://github.com/jhollandUVic/265Draw/blob/master/css_colours.txt)
	*	Supplied file with 148 css colour names
*	[`generate_carpet.py`](https://github.com/jhollandUVic/265Draw/blob/master/generate_carpet.py)
	*	Based on `generate_tree.py`
	*	The algorithm for generating Sierpinski Carpets was found at [http://lodev.org/cgtutor/sierpinski.html](http://lodev.org/cgtutor/sierpinski.html)
	*	Makes a Sierpinski Carpet lines file with levels of recursion required.
	
	`python generate_carpet.py 2 > carpet_2.txt` where the `2` is the recursion level.
	
*	[`lines_to_svg_colour.py`](https://github.com/jhollandUVic/265Draw/blob/master/lines_to_svg_colour.py)
	*	Supplied python module which translates lines created in `generate_carpet.py` and `transform_carpet.py` into SVG files.
	
*	[`Line_Point_colour.py`](https://github.com/jhollandUVic/265Draw/blob/master/Line_Point_colour.py)
	*	Classes for lines and points, as supplied with assignment.
	
*	[`rotate_scale_translate.py`](https://github.com/jhollandUVic/265Draw/blob/master/rotate_scale_translate.py)
	*	Supplied python module which performs transformations on a lines file.
	
	`python rotate_scale_translate.py -f .3333 < carpet_2.txt > carpet_2S.txt` will scale by 1/3.
*	[`sierpinksi_carpets.html`](https://github.com/jhollandUVic/265Draw/blob/master/sierpinski_carpets.html)
	*	Usersâ€™ manual for the application.

*	[`sierpinski.sh`](https://github.com/jhollandUVic/265Draw/blob/master/sierpinski.sh)
	*	Bash script to exercise code developed to build carpets.
	
*	[`transform_carpet.py`](https://github.com/jhollandUVic/265Draw/blob/master/transform_carpet.py)
	* Based on `rings.py`.
	*	Modifies an existing Sierpinski Carpet, by rotating, scaling, translating, and cloning.
	
	`python transform_carpet.py cross < carpet_2S.txt > carpet_2ST.txt` where `cross` is a pattern for transformation.

##	Bugs
*	Use of sed to replace `fill:none` in the `SVG_BOUNDING_BOX` requires a different form on Mac and on Linux:
	*	On Mac OS 10.12.3: `sed -i '' 's/none/${background}/g' carpet_${recursions}ST.svg`
	*	On Ubuntu 14.04.5: `sed -i 's/none/${background}/g' carpet_${recursions}ST.svg`
	
##	References
*	[Sierpinski Fractals](http://lodev.org/cgtutor/sierpinski.html)
*	[SVG Tutorial](https://www.w3schools.com/graphics/svg_intro.asp)

---
Last Update: 2017 March 27 at 13:12:05 PDT
