#	265Draw: Sierpinski Carpets

---
##	Application Concepts

*	A Sierpinski Carpet is a recursive fractal, where smaller copies of a square are drawn around the original square, then smaller squares around the copies, to an arbitrary level of recursion (see image below left).
*	Rotation, scaling, and translation actions are applied to surround the finished Sierpinski Carpet with copies of itself; a process called tiling (see image below right).

![Example Carpets](carpets.png "Three levels of recursion on left; Two levels of recursion with rotate tiling on right.")

###	Recursion Levels
*	In this application, recursion levels from 0 to 4 are supported. 0 is no recursion; 4 is the practical upper limit given canvas resolution, file size, and drawing speed.

###	Tiling Variations
*	The tiled carpets can be arranged in different patterns around the original: `carpet`, `cross`, `diagonal`, `rotate`.

### Colour Themes
*	`light`, `medium`, `dark` themes are supported with colours chosen randomly within each theme.

##	Application Usage

*	`sierpinski.sh` is the application script which builds the Sierpinski Carpets.

*	The form of the command-line invocation is:

	`bash sierpinski.sh recursion pattern colour-theme`

* The application script accepts three parameters:

	*	`recursion`: an integer chosen from 0 through 4.
	
	*	`pattern`: a string defining the tiling pattern required. Tiling is applied after the original carpet is scaled down to fit within the central ninth of the canvas.
		*	`carpet` creates eight copies of the original carpet around itself, four rotated 180°.
		*	`cross` creates four versions of the original carpet, rotated 45°, on the centers of the canvas sides, plus four un-rotated versions in the corners of the square.
		*	`diagonal` will place rotated versions of the original in the corners of the canvas.
		*	`rotate` will rotate all eight copies of the original by odd multiples of 45°.
					
	*	`colour-theme`: a string defining the colour selections to be used.
		*	`light`: Light colours (eg. `LightBlue`) randomly chosen from `css_colours.txt` on a `MidnightBlue` background.
		*	`medium`: Random Medium colours (eg. `MediumVioletRed`) on `WhiteSmoke`.
		*	`dark`: Random Dark colours (eg. `DarkSeaGreen`) on `Linen`.
			
*	Two SVG files are created in the same directory as the application:
	*	A Sierpinski Carpet at the recursion level and with the colour theme requested.
		*	Its file name `carpet_` is suffixed with recursion level. Eg. `carpet_3.svg`.
	*	A tiled Sierpinski Carpet with pattern and colour theme as requested.
		*	The suffix of its file name has recursion level and `ST` (which stands for `scaled and transformed`). Eg. `carpet_3ST.svg`.

*	Console Log (all but first line is output):

		==> Home: bash sierpinski.sh 3 rotate light
		*
		* Create a Recursive Sierpinski Carpet with 3 Levels
		python generate_carpet.py 3 light > carpet_3.txt
		*
		* Create colour svg file from base carpet
		python lines_to_svg_colour.py < carpet_3.txt > carpet_3.svg
		*
		* Change background colour in base carpet svg
		sed -i '' 's/none/MidnightBlue/g' carpet_3.svg
		*
		* Scale carpet lines down to fit in central ninth of canvas
		python rotate_scale_translate.py -f .3333 < carpet_3.txt > carpet_3S.txt
		*
		* Build tile patterns from scaled file
		python transform_carpet.py rotate < carpet_3S.txt > carpet_3ST.txt
		*
		*	Create colour svg file from tiled carpet
		python lines_to_svg_colour.py < carpet_3ST.txt > carpet_3ST.svg
		*
		* Change background colour in tiled carpet svg
		sed -i '' 's/none/MidnightBlue/g' carpet_3ST.svg

##	Application Source:
*	[`css_colours.txt`](https://github.com/jhollandUVic/265Draw/blob/master/css_colours.txt)
	*	Supplied file with 148 css colour names
*	[`generate_carpet.py`](https://github.com/jhollandUVic/265Draw/blob/master/generate_carpet.py)
	*	Based on `generate_tree.py`
	*	The Sierpinski Carpets algorithm was found at [http://lodev.org/cgtutor/sierpinski.html](http://lodev.org/cgtutor/sierpinski.html)
	*	Makes a Sierpinski Carpet lines file with levels of recursion required.
	
	`python generate_carpet.py 2 > carpet_2.txt` where the `2` is the recursion level.
	
*	[`lines_to_svg_colour.py`](https://github.com/jhollandUVic/265Draw/blob/master/lines_to_svg_colour.py)
	*	Supplied python module which translates lines created in `generate_carpet.py` and `transform_carpet.py` into SVG files.
	
*	[`Line_Point_colour.py`](https://github.com/jhollandUVic/265Draw/blob/master/Line_Point_colour.py)
	*	Classes for lines and points, as supplied with assignment.
	
*	[`rotate_scale_translate.py`](https://github.com/jhollandUVic/265Draw/blob/master/rotate_scale_translate.py)
	*	Supplied python module which performs transformations on a lines file.
	
	`python rotate_scale_translate.py -f .3333 < carpet_2.txt > carpet_2S.txt` scales by 1/3.
*	[`sierpinksi_carpets.html`](https://github.com/jhollandUVic/265Draw/blob/master/sierpinski_carpets.html)
	*	Users’ manual for the application.

*	[`sierpinski.sh`](https://github.com/jhollandUVic/265Draw/blob/master/sierpinski.sh)
	*	Bash script to exercise code developed to build carpets.
	
*	[`transform_carpet.py`](https://github.com/jhollandUVic/265Draw/blob/master/transform_carpet.py)
	* Based on `rings.py`.
	*	Modifies an existing Sierpinski Carpet, by rotating, scaling, translating, and cloning.
	
	`python transform_carpet.py cross < carpet_2S.txt > carpet_2ST.txt` where `cross` is a pattern for transformation.

##	Bugs
*	Use of sed to replace `none` with a background colour in the `SVG_BOUNDING_BOX` requires a different form on Mac and on Linux:
	*	On Mac OS 10.12.3: `sed -i '' 's/none/${background}/g' carpet_${recursions}ST.svg`
	*	On Ubuntu 14.04.5: `sed -i 's/none/${background}/g' carpet_${recursions}ST.svg`
	
##	References
*	[Sierpinski Fractals](http://lodev.org/cgtutor/sierpinski.html)
*	[SVG Tutorial](https://www.w3schools.com/graphics/svg_intro.asp)

---
Last Update: 2017 March 28 at 09:00:23 PDT
